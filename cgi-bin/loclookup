#!/usr/bin/python
#-*-python-*-
#
# Look-up and Conversion of Levels of Concern
# (c) 2012 Gwen Ottinger
# (c) 2012 Greg Benison
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#

import cgi
import cgitb
cgitb.enable()

import re
import csv

from genshi.template import TemplateLoader
from genshi import HTML

# --------------------------------------------------------------------
# Read the form data
# --------------------------------------------------------------------
form = cgi.FieldStorage()

# look for all 'chem*' parameters that have a corresponding 'report*' parameter
chem_pattern = re.compile('^chem(\d+)$')
def chem_lookup(chem_par):
    n = chem_pattern.findall(chem_par)[0]
    report_par = 'report' + n
    return { 'name'  : form[chem_par].value.lower(),
             'level' : form[report_par].value if report_par in form else 'NA' }

chemicals_raw = map (chem_lookup, filter (chem_pattern.match, form.keys()))
units = {'in'  : form.getvalue('inunits'),
         'out' : form.getvalue('outunits')}

requested_reports = []
if form.getvalue('full')    == 'on': requested_reports.append('full')
if form.getvalue('brief')   == 'on': requested_reports.append('brief')
if form.getvalue('summary') == 'on': requested_reports.append('medium')

# default to full report if none requested
if requested_reports == []: requested_reports = ['full']

requested_sources = []
if form.getvalue('laonly')  == 'on': requested_sources.append('lastds.txt')
if form.getvalue('nconly')  == 'on': requested_sources.append('ncstds.txt')

# Selection of sources for 'brief' report
brief_selection = form.getvalue('reflevel')

# ---------------------------------------------------------------------
# Read the standards tables
# ---------------------------------------------------------------------

def standard_cleanup(s):
    try: return s.lower().strip()
    except AttributeError: return s

def csv_file_reader(fname, fieldnames=None, dialect=None):
    csvfile = open(fname,'rb')
    if dialect == None:
        dialect = csv.Sniffer().sniff(csvfile.read(1024))
        csvfile.seek(0)
    return csv.DictReader(csvfile, fieldnames, dialect=dialect)

def key_csv_by(reader, key, cleanup=standard_cleanup):
    """Given a csv.DictReader, return a dictionary of its rows keyed by one of the columns"""
    result = {}
    for row in reader:
        if key in row:
            result[cleanup(row[key])] = row
    return result

synonym_by_name    = key_csv_by(csv_file_reader('datatables/synonyms.txt', fieldnames=['name','cas','mw']),                         'name')
synonym_by_cas     = key_csv_by(csv_file_reader('datatables/synonyms.txt', fieldnames=['name','cas','mw']),                         'cas')

def read_criteria(fname, fieldnames, columns, units):
    criteria_by_cas = key_csv_by(csv_file_reader('datatables/' + fname, fieldnames=fieldnames), 'cas')
    return map (lambda(column): {'source'      : fname,
                                 'criteria'    : criteria_by_cas,
                                 'column'      : column['column'],
                                 'description' : column['description'],
                                 'brief_description'  : HTML(column['brief_description']) if 'brief_description' in column else '<the limit>',
                                 'medium_description' : HTML(column['medium_description']),
                                 'long_description'   : HTML(column['long_description']) if 'long_description' in column else 'NA',
                                 'units'       : units},
                columns)

def list_flatten(xs):
    result = []
    for x in xs: result += x
    return result

reporting_criteria = list_flatten([
        read_criteria('ncstds.txt',
                      ['name','cas','ncann','nc24','nc1a','nc1b'],
                      [{'column': 'ncann',
                        'description': 'NC Annual Std.',
                        'brief_description': 'The North Carolina Annual Standard',
                        'medium_description': 'North Carolina Annual Ambient Air Standard',
                        'long_description':
                            """Concentrations above this level are illegal in
                               North Carolina.<br>  This level refers to the average level over a
                               period of <b>one year</b>."""},
                       {'column': 'nc24',
                        'description': 'NC 24-hr Std.',
                        'brief_description': 'The North Carolina 24-Hour Standard',
                        'medium_description': 'North Carolina 24-Hour Ambient Air Standard',
                        'long_description':
                            """Concentrations above this level are illegal in
                               North Carolina.<br>  This level refers to the average level over a
                               <b>24-hour</b> period."""},
                       {'column': 'nc1a',
                        'description': 'NC 1-hr Std.',
                        'brief_description': 'The North Carolina 1-Hour Standard',
                        'medium_description': 'North Carolina 1-Hour Ambient Air Standard',
                        'long_description':
                            """Concentrations above this level are illegal in
                               North Carolina.  This level refers to the average level over a
                               <b>one hour</b> period."""},
                       # FIXME nc1b and nc1a: synonyms?
                       {'column': 'nc1b',
                        'description': 'NC 1-hr Std.',
                        'brief_description': 'The North Carolina 1-Hour Standard',
                        'medium_description': '',
                        'long_description':
                            """
                            """}],
                      'mg/m3'),
        read_criteria('tesl.txt',
                      ['name','cas','tshort','tinter','tlong'],
                      [{'column': 'tshort',
                        'description': 'TX ESL - short term',
                        'brief_description': 'The <b>Short Term</b> (1-hr) Texas Effects Screening Level',
                        'medium_description': 'Texas Short-Term Screening Level',
                        'long_description':
                            """According to the Texas Natural Resource Conservation
                             Commission, no health effects are thought
                             to occur below this level. "Short-term" levels refer to the average
                             exposure level during <b>one hour</b>."""},
                       {'column': 'tlong',
                        'description': 'TX ESL - long term',
                        'brief_description': 'The <b>Long-Term</b> Texas Effects Screening Level',
                        'medium_description': 'Texas Long-Term Screening Level',
                        'long_description':
                            """According to the Texas Natural Resource Conservation
                             Commission, <br>  no health effects are thought
                             to occur below this level. "Long-term" levels refer to the average
                             exposure level during a <b>year</b> (24 hours for benzene and ethylene dichloride)."""}],
                      'ug/m3'),
        read_criteria('r6sls.txt',
                      ['name','cas','r6sl'],
                      [{'column': 'r6sl',
                        'description': 'EPA Region 6 Screening Level',
                        'brief_description': 'The EPA Region 6 Screening Level',
                        'medium_description': 'EPA Region 6 Screening Level',
                        'long_description':
                        """According to Region 6 of the US EPA, no health effects are thought
                           to occur below this level.
                        """}],
                      'ug/m3'),
        read_criteria('ATSDRMRLs.txt',
                      ['name','cas','atsdrac','atsdrint','atsdrchr'],
                      [{'column': 'atsdrac',
                        'description': 'ATSDR MRL - Acute',
                        'brief_description': 'The <b>Acute</b> (<2 week) ATSDR Minimal Risk Level',
                        'medium_description': 'ATSDR Acute Minimal Risk Level',
                        'long_description':
                            """According to the American Toxic Substances and Disease
                               Registry, <br>  there is no appreciable
                               risk of <i>non-cancer</i> health effects from
                               being exposed to concentrations up to this level over periods of
                               <b>up to 2 weeks</b>.
                            """},
                       {'column': 'atsdrint',
                        'description': 'ATSDR MRL - Intermediate',
                        'brief_description': 'The <b>Intermediate</b> (2 wks - 1 yr) ATSDR Minimal Risk',
                        'medium_description': 'ATSDR Intermediate Minimal Risk Level',
                        'long_description':
                            """According to the American Toxic Substances and Disease
                               Registry, <br>  there is no appreciable
                               risk of <i>non-cancer</i> health effects from
                               being exposed to concentrations up to this level over periods of
                               <b> between 2 weeks and one year</b>.
                            """},
                       {'column': 'atsdrchr',
                        'description': 'ATSDR MRL - Chronic',
                        'brief_description': 'The <b>Chronic</b> (> 1 yr) ATSDR Minimal Risk',
                        'medium_description': 'ATSDR Chronic Minimal Risk Level',
                        'long_description':
                            """According to the American Toxic Substances and Disease
                               Registry, <br>  there is no appreciable
                               risk of non-cancer health effects from
                               being exposed to concentrations up to this level over periods
                               <b>longer than one year</b>.
                            """}],
                      'ppm'),
        read_criteria('lastds.txt',
                      ['name','cas','la8','la24'],
                      [{'column': 'la8',
                        'description': 'LA 8-hr Std.',
                        'brief_description': 'The Louisiana 8-Hour Ambient Air Standard',
                        'medium_description': 'Louisiana 8-Hour Ambient Air Standard',
                        'long_description':
                            """Concentrations above this level are illegal in
                                Louisiana. This level refers to the average level over an <b>8-hour</b>  period.
                            """},
                       # FIXME is this the annual standard or the 24 hour standard?
                       {'column': 'la24',
                        'description': 'LA 24-hr Std.',
                        'brief_description': 'The Louisiana Annual Ambient Air Standard',
                        'medium_description': 'Louisiana Annual Ambient Air Standard',
                        'long_description':
                            """Concentrations above this level are illegal in
                               Louisiana. This level refers to the average level over a
                               period of <b>one year</b>.
                            """}],
                      'ug/m3')])

criteria = {'brief'   : filter(lambda c: c['source'] == brief_selection, reporting_criteria)}

# Default to all available criterion sources if none specifically requested.
if requested_sources != []:
    reporting_criteria = filter(lambda c: c['source'] in requested_sources, reporting_criteria)

criteria['medium'] = reporting_criteria
criteria['full']   = reporting_criteria

def describe_comparison(level,reference):
    """Describe the comparison between a level and a reference as an integer ratio,
       and one of Gwen's descriptive words"""
    compare = level / reference
    decimal = compare - int(compare)
    factor  = int(compare)
    description = 'unknown'
    if   (compare <= 1.0): return "is below"
    elif (compare < 1.8):  return "exceeds"
    elif (decimal < 0.2):  return "is about " + str(factor) + " times"
    elif (decimal < 0.8):  return "is <i>over</i> " + str(factor) + " times"
    else:                  return "is <i>nearly</i> " + str(factor + 1) + " times"
        
# Convert 'chemical' and 'criterion' to same units,
# return a marked-up description of their comparison
def describe_comparison_for(chemical, criterion):
    level      = criterion_level_in_outunits(chemical, criterion)
    return HTML(describe_comparison(chemical['out_level'], level))

# ---------------------------------------------------------------------
# Units conversion
# ---------------------------------------------------------------------
def convert_units(level, from_units, to_units, mw=False):
    factor = { 'ppm'         : 1.0 ,
               'ppb'         : 1000.0 ,
               'ug/m3'       : 1198.0 ,
               'mg/m3'       : 1.198 }
    if ((from_units == 'ppbv') or (to_units == 'ppbv')):
        factor['ppbv'] = 24040.0 / mw
    return level / factor[from_units] * factor[to_units]

def convert_units_for_chemical(level, chemical, from_units, to_units):
    mw = 0 # should never trigger
    if from_units == 'ppbv' or to_units == 'ppbv':
        try:
            mw_str  = synonym_by_name[standard_cleanup(chemical['name'])]['mw']
            if mw_str == '':
                return None
            else:
                mw = float(mw_str)
        except KeyError:
            return None
    return convert_units(level, from_units, to_units, mw)

failures = {'unit_conversions': [],
            'name_lookups':     []}

chemicals = []

# Add parameter 'out_level' to chemicals; reported level in output units
for chemical in chemicals_raw:
    level = float(chemical['level'])
    if standard_cleanup(chemical['name']) in synonym_by_name:
        chemical['out_level'] = convert_units_for_chemical(level, chemical, units['in'], units['out'])
        if chemical['out_level']:
            chemicals.append(chemical)
        else:
            failures['unit_conversions'].append(chemical['name'])
    else:
        failures['name_lookups'].append(chemical['name'])

# -------------------------------------------------------------------------------
# Load the report template and generate the output
# -------------------------------------------------------------------------------
loader = TemplateLoader('.')
tmpl = loader.load('report-template.html')

# HTTP headers
print "Content-type: text/html"
print

def criterion_level_in_outunits(chemical, criterion):
    try:
        cas = synonym_by_name[standard_cleanup(chemical['name'])]['cas']
        standard_level = (criterion['criteria'][cas][criterion['column']]).strip()
    except KeyError:
        return None
    if standard_level == '':
        return None
    else:
        return convert_units_for_chemical(float(standard_level), chemical, criterion['units'], units['out'])

def report_criterion(chemical, criterion):
    level = criterion_level_in_outunits(chemical, criterion)
    if level:
        return format(level, '.3g')
    else:
        return '--'

def over_criterion(chemical, criterion):
    level = criterion_level_in_outunits(chemical, criterion)
    if level and (chemical['out_level'] > level):
        return 'concern'
    else:
        return None

document = tmpl.generate(chemicals         = chemicals,
                         recipient         = [form.getvalue('tablename',False),
                                              form.getvalue('tablename2',False)],
                         units             = units,
                         criteria          = criteria,
                         requested_reports = requested_reports,
                         report_criterion  = report_criterion,
                         describe_comparison_for = describe_comparison_for,
                         over_criterion    = over_criterion,
                         failures          = failures)
                                 
print document.render('html', doctype='html')
